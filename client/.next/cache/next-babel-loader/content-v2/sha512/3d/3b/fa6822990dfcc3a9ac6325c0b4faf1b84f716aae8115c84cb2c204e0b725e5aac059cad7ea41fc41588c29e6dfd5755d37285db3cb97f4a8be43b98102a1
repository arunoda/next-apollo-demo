{"ast":null,"code":"import _regeneratorRuntime from \"/Users/gslinn/projects/next-apollo-demo/client/node_modules/@babel/runtime/regenerator\";\nimport _taggedTemplateLiteral from \"/Users/gslinn/projects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport _asyncToGenerator from \"/Users/gslinn/projects/next-apollo-demo/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n        query GetLaunches {\\n          launchesPast(limit: 10) {\\n            id\\n            mission_name\\n            launch_date_local\\n            launch_site {\\n              site_name_long\\n            }\\n            links {\\n              article_link\\n              video_link\\n              mission_patch\\n            }\\n            rocket {\\n              rocket_name\\n            }\\n          }\\n        }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { ApolloClient, InMemoryCache, gql } from '@apollo/client';\nexport function getStaticProps() {\n  return _getStaticProps.apply(this, arguments);\n}\n\nfunction _getStaticProps() {\n  _getStaticProps = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var client, _yield$client$query, data;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            client = new ApolloClient({\n              uri: 'https://api.spacex.land/graphql/',\n              cache: new InMemoryCache()\n            });\n            _context.next = 3;\n            return client.query({\n              query: gql(_templateObject())\n            });\n\n          case 3:\n            _yield$client$query = _context.sent;\n            data = _yield$client$query.data;\n            return _context.abrupt(\"return\", {\n              props: {\n                launches: data.launchesPast\n              }\n            });\n\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _getStaticProps.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/gslinn/projects/next-apollo-demo/client/api/getStaticProps.js"],"names":["ApolloClient","InMemoryCache","gql","getStaticProps","client","uri","cache","query","data","props","launches","launchesPast"],"mappings":";;;;;;;;;;;;;;AAAA,SAASA,YAAT,EAAuBC,aAAvB,EAAsCC,GAAtC,QAAiD,gBAAjD;AAEA,gBAAsBC,cAAtB;AAAA;AAAA;;;6EAAO;AAAA;;AAAA;AAAA;AAAA;AAAA;AACGC,YAAAA,MADH,GACY,IAAIJ,YAAJ,CAAiB;AAC9BK,cAAAA,GAAG,EAAE,kCADyB;AAE9BC,cAAAA,KAAK,EAAE,IAAIL,aAAJ;AAFuB,aAAjB,CADZ;AAAA;AAAA,mBAMoBG,MAAM,CAACG,KAAP,CAAa;AAClCA,cAAAA,KAAK,EAAEL,GAAF;AAD6B,aAAb,CANpB;;AAAA;AAAA;AAMKM,YAAAA,IANL,uBAMKA,IANL;AAAA,6CA6BI;AACLC,cAAAA,KAAK,EAAE;AACLC,gBAAAA,QAAQ,EAAEF,IAAI,CAACG;AADV;AADF,aA7BJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import { ApolloClient, InMemoryCache, gql } from '@apollo/client'\n\nexport async function getStaticProps() {\n    const client = new ApolloClient({\n      uri: 'https://api.spacex.land/graphql/',\n      cache: new InMemoryCache()\n    });\n  \n    const { data } = await client.query({\n      query: gql`\n        query GetLaunches {\n          launchesPast(limit: 10) {\n            id\n            mission_name\n            launch_date_local\n            launch_site {\n              site_name_long\n            }\n            links {\n              article_link\n              video_link\n              mission_patch\n            }\n            rocket {\n              rocket_name\n            }\n          }\n        }\n      `\n    });\n  \n    return {\n      props: {\n        launches: data.launchesPast\n      }\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}