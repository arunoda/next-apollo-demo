{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/gslinn/projects/next-apollo-demo/client/components/User.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useQuery, gql } from '@apollo/client';\nconst USERS = gql`\n  {\n      users {\n      firstname\n      lastname\n      address\n      city\n      state\n      country\n      phone\n    }\n  }\n`;\n\nconst User = ({\n  from,\n  qty,\n  limit\n}) => {\n  const {\n    loading,\n    error,\n    data\n  } = useQuery(USERS);\n  const {\n    0: filteredUsers,\n    1: setFilteredUsers\n  } = useState([]);\n\n  const getUsers = (from, qty, limit) => {\n    const firstUser = from;\n    const lastUser = from + qty - 1;\n    const filteredUsers = data.users.filter((item, index) => {\n      return index <= lastUser;\n    });\n    return filteredUsers;\n  };\n\n  useEffect(() => {\n    if (data) {\n      setFilteredUsers(getUsers(from, qty, limit, data));\n    }\n  }, [data, from]);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"Error :(\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 21\n  }, this);\n  return filteredUsers.map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card\",\n    children: /*#__PURE__*/_jsxDEV(\"p\", {\n      children: item.firstname\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this)\n  }, item.id, false, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this));\n};\n\nexport default User;","map":{"version":3,"sources":["/Users/gslinn/projects/next-apollo-demo/client/components/User.js"],"names":["React","useEffect","useState","useRef","useQuery","gql","USERS","User","from","qty","limit","loading","error","data","filteredUsers","setFilteredUsers","getUsers","firstUser","lastUser","users","filter","item","index","map","firstname","id"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AAEA,MAAMC,KAAK,GAAGD,GAAI;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAZA;;AAcA,MAAME,IAAI,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,GAAR;AAAaC,EAAAA;AAAb,CAAD,KAA0B;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BT,QAAQ,CAACE,KAAD,CAAzC;AACA,QAAM;AAAA,OAAEQ,aAAF;AAAA,OAAiBC;AAAjB,MAAsCb,QAAQ,CAAC,EAAD,CAApD;;AAEA,QAAMc,QAAQ,GAAI,CAACR,IAAD,EAAOC,GAAP,EAAYC,KAAZ,KAAsB;AACpC,UAAMO,SAAS,GAAGT,IAAlB;AACA,UAAMU,QAAQ,GAAGV,IAAI,GAAGC,GAAP,GAAa,CAA9B;AACA,UAAMK,aAAa,GAAGD,IAAI,CAACM,KAAL,CAAWC,MAAX,CAAkB,CAACC,IAAD,EAAOC,KAAP,KAAiB;AACrD,aAASA,KAAK,IAAIJ,QAAlB;AACH,KAFqB,CAAtB;AAIA,WAAOJ,aAAP;AACH,GARD;;AAUAb,EAAAA,SAAS,CAAC,MAAM;AACd,QAAGY,IAAH,EAAS;AACPE,MAAAA,gBAAgB,CAAEC,QAAQ,CAACR,IAAD,EAAOC,GAAP,EAAYC,KAAZ,EAAmBG,IAAnB,CAAV,CAAhB;AACD;AACF,GAJQ,EAIP,CAACA,IAAD,EAAOL,IAAP,CAJO,CAAT;AAMA,MAAIG,OAAJ,EAAa,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACb,MAAIC,KAAJ,EAAW,oBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AAEX,SACEE,aAAa,CAACS,GAAd,CAAmBF,IAAD,iBAChB;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,2BACE;AAAA,gBACGA,IAAI,CAACG;AADR;AAAA;AAAA;AAAA;AAAA;AADF,KAA2BH,IAAI,CAACI,EAAhC;AAAA;AAAA;AAAA;AAAA,UADF,CADF;AAUD,CAjCD;;AAmCA,eAAelB,IAAf","sourcesContent":["\nimport React, { useEffect, useState, useRef } from 'react';\nimport { useQuery, gql } from '@apollo/client';\n\nconst USERS = gql`\n  {\n      users {\n      firstname\n      lastname\n      address\n      city\n      state\n      country\n      phone\n    }\n  }\n`;\n\nconst User = ({ from, qty, limit }) => {\n  const { loading, error, data } = useQuery(USERS);\n  const [ filteredUsers, setFilteredUsers ] = useState([])\n\n  const getUsers =  (from, qty, limit) => {\n      const firstUser = from;\n      const lastUser = from + qty - 1;\n      const filteredUsers = data.users.filter((item, index) => {\n          return ( index <= lastUser );\n      })\n\n      return filteredUsers\n  }\n\n  useEffect(() => {\n    if(data) {\n      setFilteredUsers( getUsers(from, qty, limit, data) );\n    }\n  },[data, from])\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error :(</p>;\n\n  return (\n    filteredUsers.map((item) => (\n      <div className=\"card\" key={item.id}>\n        <p>\n          {item.firstname}\n        </p>\n      </div>\n    ))\n  )\n\n}\n\nexport default User;\n"]},"metadata":{},"sourceType":"module"}